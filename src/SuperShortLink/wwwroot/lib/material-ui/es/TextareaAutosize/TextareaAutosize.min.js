import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import PropTypes from"prop-types";import debounce from"../utils/debounce";import useForkRef from"../utils/useForkRef";import deprecatedPropType from"../utils/deprecatedPropType";function getStyleValue(e,t){return parseInt(e[t],10)||0}const useEnhancedEffect="undefined"!=typeof window?React.useLayoutEffect:React.useEffect,styles={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}},TextareaAutosize=React.forwardRef(function(l,e){const{onChange:t,rows:r,rowsMax:o,rowsMin:s,maxRows:n,minRows:a=1,style:p,value:i}=l,u=_objectWithoutPropertiesLoose(l,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),c=n||o,d=r||s||a,y=React.useRef(null!=i)["current"],m=React.useRef(null);e=useForkRef(e,m);const f=React.useRef(null),T=React.useRef(0),[h,w]=React.useState({}),b=React.useCallback(()=>{var e=m.current,t=window.getComputedStyle(e);const r=f.current;r.style.width=t.width,r.value=e.value||l.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=t["box-sizing"],s=getStyleValue(t,"padding-bottom")+getStyleValue(t,"padding-top"),n=getStyleValue(t,"border-bottom-width")+getStyleValue(t,"border-top-width"),e=r.scrollHeight-s;r.value="x";t=r.scrollHeight-s;let a=e;d&&(a=Math.max(Number(d)*t,a)),c&&(a=Math.min(Number(c)*t,a)),a=Math.max(a,t);const p=a+("border-box"===o?s+n:0),i=Math.abs(a-e)<=1;w(e=>T.current<20&&(0<p&&1<Math.abs((e.outerHeightStyle||0)-p)||e.overflow!==i)?(T.current+=1,{overflow:i,outerHeightStyle:p}):("production"!==process.env.NODE_ENV&&20===T.current&&console.error(["Material-UI: Too many re-renders. The layout is unstable.","TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n")),e))},[c,d,l.placeholder]);React.useEffect(()=>{const e=debounce(()=>{T.current=0,b()});return window.addEventListener("resize",e),()=>{e.clear(),window.removeEventListener("resize",e)}},[b]),useEnhancedEffect(()=>{b()}),React.useEffect(()=>{T.current=0},[i]);return React.createElement(React.Fragment,null,React.createElement("textarea",_extends({value:i,onChange:e=>{T.current=0,y||b(),t&&t(e)},ref:e,rows:d,style:_extends({height:h.outerHeightStyle,overflow:h.overflow?"hidden":null},p)},u)),React.createElement("textarea",{"aria-hidden":!0,className:l.className,readOnly:!0,ref:f,tabIndex:-1,style:_extends({},styles.shadow,p)}))});"production"!==process.env.NODE_ENV&&(TextareaAutosize.propTypes={className:PropTypes.string,maxRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),minRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),onChange:PropTypes.func,placeholder:PropTypes.string,rows:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `minRows` instead."),rowsMax:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `maxRows` instead."),rowsMin:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `minRows` instead."),style:PropTypes.object,value:PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string),PropTypes.number,PropTypes.string])});export default TextareaAutosize;