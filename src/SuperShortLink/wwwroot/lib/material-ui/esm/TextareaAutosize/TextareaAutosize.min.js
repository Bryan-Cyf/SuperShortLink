import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutProperties from"@babel/runtime/helpers/esm/objectWithoutProperties";import*as React from"react";import PropTypes from"prop-types";import debounce from"../utils/debounce";import useForkRef from"../utils/useForkRef";import deprecatedPropType from"../utils/deprecatedPropType";function getStyleValue(e,t){return parseInt(e[t],10)||0}var useEnhancedEffect="undefined"!=typeof window?React.useLayoutEffect:React.useEffect,styles={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}},TextareaAutosize=React.forwardRef(function(i,e){var t=i.onChange,r=i.rows,o=i.rowsMax,s=i.rowsMin,n=i.maxRows,a=i.minRows,p=void 0===a?1:a,u=i.style,l=i.value,a=_objectWithoutProperties(i,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),c=n||o,d=r||s||p,y=React.useRef(null!=l).current,f=React.useRef(null),s=useForkRef(e,f),m=React.useRef(null),T=React.useRef(0),p=React.useState({}),e=p[0],h=p[1],w=React.useCallback(function(){var e=f.current,t=window.getComputedStyle(e),r=m.current;r.style.width=t.width,r.value=e.value||i.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=t["box-sizing"],s=getStyleValue(t,"padding-bottom")+getStyleValue(t,"padding-top"),n=getStyleValue(t,"border-bottom-width")+getStyleValue(t,"border-top-width"),e=r.scrollHeight-s;r.value="x";t=r.scrollHeight-s,r=e;d&&(r=Math.max(Number(d)*t,r)),c&&(r=Math.min(Number(c)*t,r));var a=(r=Math.max(r,t))+("border-box"===o?s+n:0),p=Math.abs(r-e)<=1;h(function(e){return T.current<20&&(0<a&&1<Math.abs((e.outerHeightStyle||0)-a)||e.overflow!==p)?(T.current+=1,{overflow:p,outerHeightStyle:a}):("production"!==process.env.NODE_ENV&&20===T.current&&console.error(["Material-UI: Too many re-renders. The layout is unstable.","TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n")),e)})},[c,d,i.placeholder]);React.useEffect(function(){var e=debounce(function(){T.current=0,w()});return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[w]),useEnhancedEffect(function(){w()}),React.useEffect(function(){T.current=0},[l]);return React.createElement(React.Fragment,null,React.createElement("textarea",_extends({value:l,onChange:function(e){T.current=0,y||w(),t&&t(e)},ref:s,rows:d,style:_extends({height:e.outerHeightStyle,overflow:e.overflow?"hidden":null},u)},a)),React.createElement("textarea",{"aria-hidden":!0,className:i.className,readOnly:!0,ref:m,tabIndex:-1,style:_extends({},styles.shadow,u)}))});"production"!==process.env.NODE_ENV&&(TextareaAutosize.propTypes={className:PropTypes.string,maxRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),minRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),onChange:PropTypes.func,placeholder:PropTypes.string,rows:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `minRows` instead."),rowsMax:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `maxRows` instead."),rowsMin:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `minRows` instead."),style:PropTypes.object,value:PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string),PropTypes.number,PropTypes.string])});export default TextareaAutosize;