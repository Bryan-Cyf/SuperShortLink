import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutProperties from"@babel/runtime/helpers/esm/objectWithoutProperties";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{HTMLElementType}from"@material-ui/utils";import withStyles from"../styles/withStyles";import Popover from"../Popover";import MenuList from"../MenuList";import*as ReactDOM from"react-dom";import setRef from"../utils/setRef";import useTheme from"../styles/useTheme";import deprecatedPropType from"../utils/deprecatedPropType";var RTL_ORIGIN={vertical:"top",horizontal:"right"},LTR_ORIGIN={vertical:"top",horizontal:"left"},styles={paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},Menu=React.forwardRef(function(e,o){var r=e.autoFocus,t=void 0===r||r,s=e.children,n=e.classes,p=e.disableAutoFocusItem,i=void 0!==p&&p,a=e.MenuListProps,c=void 0===a?{}:a,u=e.onClose,l=e.onEntering,d=e.open,P=e.PaperProps,m=void 0===P?{}:P,r=e.PopoverClasses,p=e.transitionDuration,a=void 0===p?"auto":p,P=e.TransitionProps,T=(P=void 0===P?{}:P).onEntering,p=_objectWithoutProperties(P,["onEntering"]),P=e.variant,y=void 0===P?"selectedMenu":P,P=_objectWithoutProperties(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"]),f=useTheme(),e=t&&!i&&d,h=React.useRef(null),R=React.useRef(null),b=-1;React.Children.map(s,function(e,o){React.isValidElement(e)&&("production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n")),e.props.disabled||("menu"!==y&&e.props.selected||-1===b)&&(b=o))});s=React.Children.map(s,function(o,e){return e===b?React.cloneElement(o,{ref:function(e){R.current=ReactDOM.findDOMNode(e),setRef(o.ref,e)}}):o});return React.createElement(Popover,_extends({getContentAnchorEl:function(){return R.current},classes:r,onClose:u,TransitionProps:_extends({onEntering:function(e,o){h.current&&h.current.adjustStyleForScrollbar(e,f),l&&l(e,o),T&&T(e,o)}},p),anchorOrigin:"rtl"===f.direction?RTL_ORIGIN:LTR_ORIGIN,transformOrigin:"rtl"===f.direction?RTL_ORIGIN:LTR_ORIGIN,PaperProps:_extends({},m,{classes:_extends({},m.classes,{root:n.paper})}),open:d,ref:o,transitionDuration:a},P),React.createElement(MenuList,_extends({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),u&&u(e,"tabKeyDown"))},actions:h,autoFocus:t&&(-1===b||i),autoFocusItem:e,variant:y},c,{className:clsx(n.list,c.className)}),s))});"production"!==process.env.NODE_ENV&&(Menu.propTypes={anchorEl:PropTypes.oneOfType([HTMLElementType,PropTypes.func]),autoFocus:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,disableAutoFocusItem:PropTypes.bool,MenuListProps:PropTypes.object,onClose:PropTypes.func,onEnter:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onEntered:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onEntering:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExit:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExited:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExiting:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),open:PropTypes.bool.isRequired,PaperProps:PropTypes.object,PopoverClasses:PropTypes.object,transitionDuration:PropTypes.oneOfType([PropTypes.oneOf(["auto"]),PropTypes.number,PropTypes.shape({appear:PropTypes.number,enter:PropTypes.number,exit:PropTypes.number})]),TransitionProps:PropTypes.object,variant:PropTypes.oneOf(["menu","selectedMenu"])});export default withStyles(styles,{name:"MuiMenu"})(Menu);export{styles};